/* soapCS8ServerV0Proxy.cpp
   Generated by gSOAP 2.7.13 from cs8server.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapCS8ServerV0Proxy.h"

CS8ServerV0Proxy::CS8ServerV0Proxy()
{	CS8ServerV0Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

CS8ServerV0Proxy::CS8ServerV0Proxy(const struct soap &soap)
{	soap_copy_context(this, &soap);
	CS8ServerV0Proxy_init(soap.imode, soap.omode);
}

CS8ServerV0Proxy::CS8ServerV0Proxy(soap_mode iomode)
{	CS8ServerV0Proxy_init(iomode, iomode);
}

CS8ServerV0Proxy::CS8ServerV0Proxy(soap_mode imode, soap_mode omode)
{	CS8ServerV0Proxy_init(imode, omode);
}

void CS8ServerV0Proxy::CS8ServerV0Proxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns5", "http://tempuri.org/xmlmime.xsd", NULL, NULL},
	{"ns3", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
	{"ns4", "http://www.w3.org/2004/11/xmlmime", NULL, NULL},
	{"ns1", "CS8ServerV0", NULL, NULL},
	{"ns2", "urn:CS8ServerV1", NULL, NULL},
	{"ns6", "urn:CS8ServerV3", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	if (!this->namespaces)
		this->namespaces = namespaces;
}

CS8ServerV0Proxy::~CS8ServerV0Proxy()
{ }

void CS8ServerV0Proxy::soap_noheader()
{	header = NULL;
}

void CS8ServerV0Proxy::soap_header(int *ns1__sessionId)
{	::soap_header(this);
	this->header->ns1__sessionId = ns1__sessionId;
}

const SOAP_ENV__Header *CS8ServerV0Proxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *CS8ServerV0Proxy::soap_fault()
{	return this->fault;
}

const char *CS8ServerV0Proxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *CS8ServerV0Proxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int CS8ServerV0Proxy::soap_close_socket()
{	return soap_closesock(this);
}

void CS8ServerV0Proxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void CS8ServerV0Proxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *CS8ServerV0Proxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int CS8ServerV0Proxy::getSoapServerVersion(_ns1__getSoapServerVersion *ns1__getSoapServerVersion, _ns1__getSoapServerVersionResponse *ns1__getSoapServerVersionResponse)
{	struct soap *soap = this;
	struct __ns1__getSoapServerVersion soap_tmp___ns1__getSoapServerVersion;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getSoapServerVersion.ns1__getSoapServerVersion = ns1__getSoapServerVersion;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getSoapServerVersion(soap, &soap_tmp___ns1__getSoapServerVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getSoapServerVersion(soap, &soap_tmp___ns1__getSoapServerVersion, "-ns1:getSoapServerVersion", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getSoapServerVersion(soap, &soap_tmp___ns1__getSoapServerVersion, "-ns1:getSoapServerVersion", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getSoapServerVersionResponse)
		return soap_closesock(soap);
	ns1__getSoapServerVersionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getSoapServerVersionResponse->soap_get(soap, "ns1:getSoapServerVersionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV0Proxy::ping(_ns1__ping *ns1__ping, _ns1__pingResponse *ns1__pingResponse)
{	struct soap *soap = this;
	struct __ns1__ping soap_tmp___ns1__ping;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ping.ns1__ping = ns1__ping;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ping(soap, &soap_tmp___ns1__ping);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ping(soap, &soap_tmp___ns1__ping, "-ns1:ping", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ping(soap, &soap_tmp___ns1__ping, "-ns1:ping", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__pingResponse)
		return soap_closesock(soap);
	ns1__pingResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__pingResponse->soap_get(soap, "ns1:pingResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV0Proxy::getCS8Versions(_ns1__getCS8Versions *ns1__getCS8Versions, _ns1__getCS8VersionsResponse *ns1__getCS8VersionsResponse)
{	struct soap *soap = this;
	struct __ns1__getCS8Versions soap_tmp___ns1__getCS8Versions;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getCS8Versions.ns1__getCS8Versions = ns1__getCS8Versions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getCS8Versions(soap, &soap_tmp___ns1__getCS8Versions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getCS8Versions(soap, &soap_tmp___ns1__getCS8Versions, "-ns1:getCS8Versions", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getCS8Versions(soap, &soap_tmp___ns1__getCS8Versions, "-ns1:getCS8Versions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getCS8VersionsResponse)
		return soap_closesock(soap);
	ns1__getCS8VersionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getCS8VersionsResponse->soap_get(soap, "ns1:getCS8VersionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV0Proxy::login(_ns1__login *ns1__login, _ns1__loginResponse *ns1__loginResponse)
{	struct soap *soap = this;
	struct __ns1__login soap_tmp___ns1__login;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__login.ns1__login = ns1__login;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__login(soap, &soap_tmp___ns1__login);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__login(soap, &soap_tmp___ns1__login, "-ns1:login", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__login(soap, &soap_tmp___ns1__login, "-ns1:login", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__loginResponse)
		return soap_closesock(soap);
	ns1__loginResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__loginResponse->soap_get(soap, "ns1:loginResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV0Proxy::logout(_ns1__logout *ns1__logout, _ns1__logoutResponse *ns1__logoutResponse)
{	struct soap *soap = this;
	struct __ns1__logout soap_tmp___ns1__logout;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__logout.ns1__logout = ns1__logout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__logout(soap, &soap_tmp___ns1__logout);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__logout(soap, &soap_tmp___ns1__logout, "-ns1:logout", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__logout(soap, &soap_tmp___ns1__logout, "-ns1:logout", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__logoutResponse)
		return soap_closesock(soap);
	ns1__logoutResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__logoutResponse->soap_get(soap, "ns1:logoutResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV0Proxy::getRobots(_ns1__getRobots *ns1__getRobots, _ns1__getRobotsResponse *ns1__getRobotsResponse)
{	struct soap *soap = this;
	struct __ns1__getRobots soap_tmp___ns1__getRobots;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getRobots.ns1__getRobots = ns1__getRobots;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getRobots(soap, &soap_tmp___ns1__getRobots);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getRobots(soap, &soap_tmp___ns1__getRobots, "-ns1:getRobots", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getRobots(soap, &soap_tmp___ns1__getRobots, "-ns1:getRobots", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getRobotsResponse)
		return soap_closesock(soap);
	ns1__getRobotsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getRobotsResponse->soap_get(soap, "ns1:getRobotsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV0Proxy::getRobotJointPos(_ns1__getRobotJointPos *ns1__getRobotJointPos, _ns1__getRobotJointPosResponse *ns1__getRobotJointPosResponse)
{	struct soap *soap = this;
	struct __ns1__getRobotJointPos soap_tmp___ns1__getRobotJointPos;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getRobotJointPos.ns1__getRobotJointPos = ns1__getRobotJointPos;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getRobotJointPos(soap, &soap_tmp___ns1__getRobotJointPos);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getRobotJointPos(soap, &soap_tmp___ns1__getRobotJointPos, "-ns1:getRobotJointPos", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getRobotJointPos(soap, &soap_tmp___ns1__getRobotJointPos, "-ns1:getRobotJointPos", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getRobotJointPosResponse)
		return soap_closesock(soap);
	ns1__getRobotJointPosResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getRobotJointPosResponse->soap_get(soap, "ns1:getRobotJointPosResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV0Proxy::getRobotJntCartPos(_ns1__getRobotJntCartPos *ns1__getRobotJntCartPos, _ns1__getRobotJntCartPosResponse *ns1__getRobotJntCartPosResponse)
{	struct soap *soap = this;
	struct __ns1__getRobotJntCartPos soap_tmp___ns1__getRobotJntCartPos;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getRobotJntCartPos.ns1__getRobotJntCartPos = ns1__getRobotJntCartPos;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getRobotJntCartPos(soap, &soap_tmp___ns1__getRobotJntCartPos);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getRobotJntCartPos(soap, &soap_tmp___ns1__getRobotJntCartPos, "-ns1:getRobotJntCartPos", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getRobotJntCartPos(soap, &soap_tmp___ns1__getRobotJntCartPos, "-ns1:getRobotJntCartPos", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getRobotJntCartPosResponse)
		return soap_closesock(soap);
	ns1__getRobotJntCartPosResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getRobotJntCartPosResponse->soap_get(soap, "ns1:getRobotJntCartPosResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV0Proxy::setRobotJointPos(_ns1__setRobotJointPos *ns1__setRobotJointPos, _ns1__setRobotPosResponse *ns1__setRobotPosResponse)
{	struct soap *soap = this;
	struct __ns1__setRobotJointPos soap_tmp___ns1__setRobotJointPos;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__setRobotJointPos.ns1__setRobotJointPos = ns1__setRobotJointPos;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__setRobotJointPos(soap, &soap_tmp___ns1__setRobotJointPos);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setRobotJointPos(soap, &soap_tmp___ns1__setRobotJointPos, "-ns1:setRobotJointPos", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setRobotJointPos(soap, &soap_tmp___ns1__setRobotJointPos, "-ns1:setRobotJointPos", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__setRobotPosResponse)
		return soap_closesock(soap);
	ns1__setRobotPosResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__setRobotPosResponse->soap_get(soap, "ns1:setRobotPosResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
