/* soapCS8ServerV0Proxy.h
   Generated by gSOAP 2.7.13 from cs8server.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapCS8ServerV0Proxy_H
#define soapCS8ServerV0Proxy_H
#include "soapH.h"

class SOAP_CMAC CS8ServerV0Proxy : public soap
{ public:
	/// Endpoint URL of service 'CS8ServerV0Proxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	CS8ServerV0Proxy();
	/// Constructor with copy of another engine state
	CS8ServerV0Proxy(const struct soap&);
	/// Constructor with engine input+output mode control
	CS8ServerV0Proxy(soap_mode iomode);
	/// Constructor with engine input and output mode control
	CS8ServerV0Proxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~CS8ServerV0Proxy();
	/// Initializer used by constructor
	virtual	void CS8ServerV0Proxy_init(soap_mode imode, soap_mode omode);
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Put SOAP Header in message
	virtual	void soap_header(int *ns1__sessionId);
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Force close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'getSoapServerVersion' (returns error code or SOAP_OK)
	virtual	int getSoapServerVersion(_ns1__getSoapServerVersion *ns1__getSoapServerVersion, _ns1__getSoapServerVersionResponse *ns1__getSoapServerVersionResponse);

	/// Web service operation 'ping' (returns error code or SOAP_OK)
	virtual	int ping(_ns1__ping *ns1__ping, _ns1__pingResponse *ns1__pingResponse);

	/// Web service operation 'getCS8Versions' (returns error code or SOAP_OK)
	virtual	int getCS8Versions(_ns1__getCS8Versions *ns1__getCS8Versions, _ns1__getCS8VersionsResponse *ns1__getCS8VersionsResponse);

	/// Web service operation 'login' (returns error code or SOAP_OK)
	virtual	int login(_ns1__login *ns1__login, _ns1__loginResponse *ns1__loginResponse);

	/// Web service operation 'logout' (returns error code or SOAP_OK)
	virtual	int logout(_ns1__logout *ns1__logout, _ns1__logoutResponse *ns1__logoutResponse);

	/// Web service operation 'getRobots' (returns error code or SOAP_OK)
	virtual	int getRobots(_ns1__getRobots *ns1__getRobots, _ns1__getRobotsResponse *ns1__getRobotsResponse);

	/// Web service operation 'getRobotJointPos' (returns error code or SOAP_OK)
	virtual	int getRobotJointPos(_ns1__getRobotJointPos *ns1__getRobotJointPos, _ns1__getRobotJointPosResponse *ns1__getRobotJointPosResponse);

	/// Web service operation 'getRobotJntCartPos' (returns error code or SOAP_OK)
	virtual	int getRobotJntCartPos(_ns1__getRobotJntCartPos *ns1__getRobotJntCartPos, _ns1__getRobotJntCartPosResponse *ns1__getRobotJntCartPosResponse);

	/// Web service operation 'setRobotJointPos' (returns error code or SOAP_OK)
	virtual	int setRobotJointPos(_ns1__setRobotJointPos *ns1__setRobotJointPos, _ns1__setRobotPosResponse *ns1__setRobotPosResponse);
};
#endif
