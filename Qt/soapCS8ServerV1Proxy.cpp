/* soapCS8ServerV1Proxy.cpp
   Generated by gSOAP 2.7.13 from cs8server.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapCS8ServerV1Proxy.h"

CS8ServerV1Proxy::CS8ServerV1Proxy()
{	CS8ServerV1Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

CS8ServerV1Proxy::CS8ServerV1Proxy(const struct soap &soap)
{	soap_copy_context(this, &soap);
	CS8ServerV1Proxy_init(soap.imode, soap.omode);
}

CS8ServerV1Proxy::CS8ServerV1Proxy(soap_mode iomode)
{	CS8ServerV1Proxy_init(iomode, iomode);
}

CS8ServerV1Proxy::CS8ServerV1Proxy(soap_mode imode, soap_mode omode)
{	CS8ServerV1Proxy_init(imode, omode);
}

void CS8ServerV1Proxy::CS8ServerV1Proxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns5", "http://tempuri.org/xmlmime.xsd", NULL, NULL},
	{"ns3", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
	{"ns4", "http://www.w3.org/2004/11/xmlmime", NULL, NULL},
	{"ns1", "CS8ServerV0", NULL, NULL},
	{"ns2", "urn:CS8ServerV1", NULL, NULL},
	{"ns6", "urn:CS8ServerV3", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	if (!this->namespaces)
		this->namespaces = namespaces;
}

CS8ServerV1Proxy::~CS8ServerV1Proxy()
{ }

void CS8ServerV1Proxy::soap_noheader()
{	header = NULL;
}

void CS8ServerV1Proxy::soap_header(int *ns1__sessionId)
{	::soap_header(this);
	this->header->ns1__sessionId = ns1__sessionId;
}

const SOAP_ENV__Header *CS8ServerV1Proxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *CS8ServerV1Proxy::soap_fault()
{	return this->fault;
}

const char *CS8ServerV1Proxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *CS8ServerV1Proxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int CS8ServerV1Proxy::soap_close_socket()
{	return soap_closesock(this);
}

void CS8ServerV1Proxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void CS8ServerV1Proxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *CS8ServerV1Proxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int CS8ServerV1Proxy::getApplications(_ns2__getApplications *ns2__getApplications, _ns2__getApplicationsResponse *ns2__getApplicationsResponse)
{	struct soap *soap = this;
	struct __ns2__getApplications soap_tmp___ns2__getApplications;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/CS8ServerV1";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__getApplications.ns2__getApplications = ns2__getApplications;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__getApplications(soap, &soap_tmp___ns2__getApplications);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__getApplications(soap, &soap_tmp___ns2__getApplications, "-ns2:getApplications", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__getApplications(soap, &soap_tmp___ns2__getApplications, "-ns2:getApplications", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__getApplicationsResponse)
		return soap_closesock(soap);
	ns2__getApplicationsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__getApplicationsResponse->soap_get(soap, "ns2:getApplicationsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV1Proxy::getApplicationDatas(_ns2__getApplicationDatas *ns2__getApplicationDatas, _ns2__getApplicationDatasResponse *ns2__getApplicationDatasResponse)
{	struct soap *soap = this;
	struct __ns2__getApplicationDatas soap_tmp___ns2__getApplicationDatas;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/CS8ServerV1";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__getApplicationDatas.ns2__getApplicationDatas = ns2__getApplicationDatas;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__getApplicationDatas(soap, &soap_tmp___ns2__getApplicationDatas);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__getApplicationDatas(soap, &soap_tmp___ns2__getApplicationDatas, "-ns2:getApplicationDatas", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__getApplicationDatas(soap, &soap_tmp___ns2__getApplicationDatas, "-ns2:getApplicationDatas", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__getApplicationDatasResponse)
		return soap_closesock(soap);
	ns2__getApplicationDatasResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__getApplicationDatasResponse->soap_get(soap, "ns2:getApplicationDatasResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV1Proxy::getRecords(_ns2__getRecords *ns2__getRecords, _ns2__getRecordsResponse *ns2__getRecordsResponse)
{	struct soap *soap = this;
	struct __ns2__getRecords soap_tmp___ns2__getRecords;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/CS8ServerV1";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__getRecords.ns2__getRecords = ns2__getRecords;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__getRecords(soap, &soap_tmp___ns2__getRecords);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__getRecords(soap, &soap_tmp___ns2__getRecords, "-ns2:getRecords", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__getRecords(soap, &soap_tmp___ns2__getRecords, "-ns2:getRecords", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__getRecordsResponse)
		return soap_closesock(soap);
	ns2__getRecordsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__getRecordsResponse->soap_get(soap, "ns2:getRecordsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV1Proxy::getRecord(_ns2__getRecord *ns2__getRecord, _ns2__getRecordResponse *ns2__getRecordResponse)
{	struct soap *soap = this;
	struct __ns2__getRecord soap_tmp___ns2__getRecord;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/CS8ServerV1";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__getRecord.ns2__getRecord = ns2__getRecord;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__getRecord(soap, &soap_tmp___ns2__getRecord);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__getRecord(soap, &soap_tmp___ns2__getRecord, "-ns2:getRecord", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__getRecord(soap, &soap_tmp___ns2__getRecord, "-ns2:getRecord", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__getRecordResponse)
		return soap_closesock(soap);
	ns2__getRecordResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__getRecordResponse->soap_get(soap, "ns2:getRecordResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV1Proxy::getJointRange(_ns2__getJointRange *ns2__getJointRange, _ns2__getJointRangeResponse *ns2__getJointRangeResponse)
{	struct soap *soap = this;
	struct __ns2__getJointRange soap_tmp___ns2__getJointRange;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/CS8ServerV1";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__getJointRange.ns2__getJointRange = ns2__getJointRange;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__getJointRange(soap, &soap_tmp___ns2__getJointRange);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__getJointRange(soap, &soap_tmp___ns2__getJointRange, "-ns2:getJointRange", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__getJointRange(soap, &soap_tmp___ns2__getJointRange, "-ns2:getJointRange", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns2__getJointRangeResponse)
		return soap_closesock(soap);
	ns2__getJointRangeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__getJointRangeResponse->soap_get(soap, "ns2:getJointRangeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
