/* soapCS8ServerV3Proxy.cpp
   Generated by gSOAP 2.7.13 from cs8server.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapCS8ServerV3Proxy.h"

CS8ServerV3Proxy::CS8ServerV3Proxy()
{	CS8ServerV3Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

CS8ServerV3Proxy::CS8ServerV3Proxy(const struct soap &soap)
{	soap_copy_context(this, &soap);
	CS8ServerV3Proxy_init(soap.imode, soap.omode);
}

CS8ServerV3Proxy::CS8ServerV3Proxy(soap_mode iomode)
{	CS8ServerV3Proxy_init(iomode, iomode);
}

CS8ServerV3Proxy::CS8ServerV3Proxy(soap_mode imode, soap_mode omode)
{	CS8ServerV3Proxy_init(imode, omode);
}

void CS8ServerV3Proxy::CS8ServerV3Proxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns5", "http://tempuri.org/xmlmime.xsd", NULL, NULL},
	{"ns3", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
	{"ns4", "http://www.w3.org/2004/11/xmlmime", NULL, NULL},
	{"ns1", "CS8ServerV0", NULL, NULL},
	{"ns2", "urn:CS8ServerV1", NULL, NULL},
	{"ns6", "urn:CS8ServerV3", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	if (!this->namespaces)
		this->namespaces = namespaces;
}

CS8ServerV3Proxy::~CS8ServerV3Proxy()
{ }

void CS8ServerV3Proxy::soap_noheader()
{	header = NULL;
}

void CS8ServerV3Proxy::soap_header(int *ns1__sessionId)
{	::soap_header(this);
	this->header->ns1__sessionId = ns1__sessionId;
}

const SOAP_ENV__Header *CS8ServerV3Proxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *CS8ServerV3Proxy::soap_fault()
{	return this->fault;
}

const char *CS8ServerV3Proxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *CS8ServerV3Proxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int CS8ServerV3Proxy::soap_close_socket()
{	return soap_closesock(this);
}

void CS8ServerV3Proxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void CS8ServerV3Proxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *CS8ServerV3Proxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int CS8ServerV3Proxy::forwardKin(_ns6__forwardKin *ns6__forwardKin, _ns6__forwardKinResponse *ns6__forwardKinResponse)
{	struct soap *soap = this;
	struct __ns6__forwardKin soap_tmp___ns6__forwardKin;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/CS8ServerV3";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__forwardKin.ns6__forwardKin = ns6__forwardKin;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__forwardKin(soap, &soap_tmp___ns6__forwardKin);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__forwardKin(soap, &soap_tmp___ns6__forwardKin, "-ns6:forwardKin", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__forwardKin(soap, &soap_tmp___ns6__forwardKin, "-ns6:forwardKin", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns6__forwardKinResponse)
		return soap_closesock(soap);
	ns6__forwardKinResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns6__forwardKinResponse->soap_get(soap, "ns6:forwardKinResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV3Proxy::reverseKin(_ns6__reverseKin *ns6__reverseKin, _ns6__reverseKinResponse *ns6__reverseKinResponse)
{	struct soap *soap = this;
	struct __ns6__reverseKin soap_tmp___ns6__reverseKin;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/CS8ServerV3";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__reverseKin.ns6__reverseKin = ns6__reverseKin;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__reverseKin(soap, &soap_tmp___ns6__reverseKin);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__reverseKin(soap, &soap_tmp___ns6__reverseKin, "-ns6:reverseKin", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__reverseKin(soap, &soap_tmp___ns6__reverseKin, "-ns6:reverseKin", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns6__reverseKinResponse)
		return soap_closesock(soap);
	ns6__reverseKinResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns6__reverseKinResponse->soap_get(soap, "ns6:reverseKinResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV3Proxy::moveJJ(_ns6__moveJJ *ns6__moveJJ, _ns6__moveResponse *ns6__moveResponse)
{	struct soap *soap = this;
	struct __ns6__moveJJ soap_tmp___ns6__moveJJ;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/CS8ServerV3";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__moveJJ.ns6__moveJJ = ns6__moveJJ;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__moveJJ(soap, &soap_tmp___ns6__moveJJ);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__moveJJ(soap, &soap_tmp___ns6__moveJJ, "-ns6:moveJJ", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__moveJJ(soap, &soap_tmp___ns6__moveJJ, "-ns6:moveJJ", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns6__moveResponse)
		return soap_closesock(soap);
	ns6__moveResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns6__moveResponse->soap_get(soap, "ns6:moveResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV3Proxy::moveJC(_ns6__moveJC *ns6__moveJC, _ns6__moveResponse *ns6__moveResponse)
{	struct soap *soap = this;
	struct __ns6__moveJC soap_tmp___ns6__moveJC;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/CS8ServerV3";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__moveJC.ns6__moveJC = ns6__moveJC;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__moveJC(soap, &soap_tmp___ns6__moveJC);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__moveJC(soap, &soap_tmp___ns6__moveJC, "-ns6:moveJC", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__moveJC(soap, &soap_tmp___ns6__moveJC, "-ns6:moveJC", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns6__moveResponse)
		return soap_closesock(soap);
	ns6__moveResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns6__moveResponse->soap_get(soap, "ns6:moveResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV3Proxy::moveL(_ns6__moveL *ns6__moveL, _ns6__moveResponse *ns6__moveResponse)
{	struct soap *soap = this;
	struct __ns6__moveL soap_tmp___ns6__moveL;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/CS8ServerV3";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__moveL.ns6__moveL = ns6__moveL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__moveL(soap, &soap_tmp___ns6__moveL);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__moveL(soap, &soap_tmp___ns6__moveL, "-ns6:moveL", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__moveL(soap, &soap_tmp___ns6__moveL, "-ns6:moveL", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns6__moveResponse)
		return soap_closesock(soap);
	ns6__moveResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns6__moveResponse->soap_get(soap, "ns6:moveResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV3Proxy::moveC(_ns6__moveC *ns6__moveC, _ns6__moveResponse *ns6__moveResponse)
{	struct soap *soap = this;
	struct __ns6__moveC soap_tmp___ns6__moveC;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/CS8ServerV3";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__moveC.ns6__moveC = ns6__moveC;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__moveC(soap, &soap_tmp___ns6__moveC);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__moveC(soap, &soap_tmp___ns6__moveC, "-ns6:moveC", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__moveC(soap, &soap_tmp___ns6__moveC, "-ns6:moveC", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns6__moveResponse)
		return soap_closesock(soap);
	ns6__moveResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns6__moveResponse->soap_get(soap, "ns6:moveResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV3Proxy::resetMotion(_ns6__resetMotion *ns6__resetMotion, _ns6__motionResponse *ns6__motionResponse)
{	struct soap *soap = this;
	struct __ns6__resetMotion soap_tmp___ns6__resetMotion;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/CS8ServerV3";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__resetMotion.ns6__resetMotion = ns6__resetMotion;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__resetMotion(soap, &soap_tmp___ns6__resetMotion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__resetMotion(soap, &soap_tmp___ns6__resetMotion, "-ns6:resetMotion", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__resetMotion(soap, &soap_tmp___ns6__resetMotion, "-ns6:resetMotion", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns6__motionResponse)
		return soap_closesock(soap);
	ns6__motionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns6__motionResponse->soap_get(soap, "ns6:motionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV3Proxy::stopMotion(_ns6__stopMotion *ns6__stopMotion, _ns6__motionResponse *ns6__motionResponse)
{	struct soap *soap = this;
	struct __ns6__stopMotion soap_tmp___ns6__stopMotion;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/CS8ServerV3";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__stopMotion.ns6__stopMotion = ns6__stopMotion;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__stopMotion(soap, &soap_tmp___ns6__stopMotion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__stopMotion(soap, &soap_tmp___ns6__stopMotion, "-ns6:stopMotion", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__stopMotion(soap, &soap_tmp___ns6__stopMotion, "-ns6:stopMotion", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns6__motionResponse)
		return soap_closesock(soap);
	ns6__motionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns6__motionResponse->soap_get(soap, "ns6:motionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV3Proxy::restartMotion(_ns6__restartMotion *ns6__restartMotion, _ns6__motionResponse *ns6__motionResponse)
{	struct soap *soap = this;
	struct __ns6__restartMotion soap_tmp___ns6__restartMotion;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/CS8ServerV3";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__restartMotion.ns6__restartMotion = ns6__restartMotion;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__restartMotion(soap, &soap_tmp___ns6__restartMotion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__restartMotion(soap, &soap_tmp___ns6__restartMotion, "-ns6:restartMotion", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__restartMotion(soap, &soap_tmp___ns6__restartMotion, "-ns6:restartMotion", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns6__motionResponse)
		return soap_closesock(soap);
	ns6__motionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns6__motionResponse->soap_get(soap, "ns6:motionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV3Proxy::setSchedulingMode(_ns6__setSchedulingMode *ns6__setSchedulingMode, _ns6__setSchedulingModeResponse *ns6__setSchedulingModeResponse)
{	struct soap *soap = this;
	struct __ns6__setSchedulingMode soap_tmp___ns6__setSchedulingMode;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/CS8ServerV3";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__setSchedulingMode.ns6__setSchedulingMode = ns6__setSchedulingMode;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__setSchedulingMode(soap, &soap_tmp___ns6__setSchedulingMode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__setSchedulingMode(soap, &soap_tmp___ns6__setSchedulingMode, "-ns6:setSchedulingMode", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__setSchedulingMode(soap, &soap_tmp___ns6__setSchedulingMode, "-ns6:setSchedulingMode", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns6__setSchedulingModeResponse)
		return soap_closesock(soap);
	ns6__setSchedulingModeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns6__setSchedulingModeResponse->soap_get(soap, "ns6:setSchedulingModeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV3Proxy::schedulerRefresh(_ns6__schedulerRefresh *ns6__schedulerRefresh, _ns6__MotionAndRobotsPos *ns6__MotionAndRobotsPos)
{	struct soap *soap = this;
	struct __ns6__schedulerRefresh soap_tmp___ns6__schedulerRefresh;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/CS8ServerV3";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__schedulerRefresh.ns6__schedulerRefresh = ns6__schedulerRefresh;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__schedulerRefresh(soap, &soap_tmp___ns6__schedulerRefresh);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__schedulerRefresh(soap, &soap_tmp___ns6__schedulerRefresh, "-ns6:schedulerRefresh", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__schedulerRefresh(soap, &soap_tmp___ns6__schedulerRefresh, "-ns6:schedulerRefresh", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns6__MotionAndRobotsPos)
		return soap_closesock(soap);
	ns6__MotionAndRobotsPos->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns6__MotionAndRobotsPos->soap_get(soap, "ns6:MotionAndRobotsPos", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CS8ServerV3Proxy::setPower(_ns6__setPower *ns6__setPower, _ns6__setPowerResponse *ns6__setPowerResponse)
{	struct soap *soap = this;
	struct __ns6__setPower soap_tmp___ns6__setPower;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.1.254:5653/CS8ServerV3";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__setPower.ns6__setPower = ns6__setPower;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__setPower(soap, &soap_tmp___ns6__setPower);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__setPower(soap, &soap_tmp___ns6__setPower, "-ns6:setPower", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__setPower(soap, &soap_tmp___ns6__setPower, "-ns6:setPower", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns6__setPowerResponse)
		return soap_closesock(soap);
	ns6__setPowerResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns6__setPowerResponse->soap_get(soap, "ns6:setPowerResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
